#!/usr/bin/env java --source 16

import static java.nio.charset.StandardCharsets.UTF_8;

import java.io.IOException;
import java.io.InputStream;
import java.net.InetSocketAddress;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;
import java.util.stream.Collectors;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

/**
 * Plugin for ChatGPT that can access the files in the directory it is started in. Implemented as a single Java application runnable from the shell, without using any dependencies outside the JDK.
 * To use this, you need to have registered as a plugin developer, and add this with "Develop your own plugin" in the ChatGPT web interface.
 * Start it in the directory you want to access, then use the plugin in ChatGPT.
 * <p>
 * Check OpenAPI description with curl -is http://localhost:3000/dirreaderplugin.yaml , and the plugin description with
 * curl -is http://localhost:3000/.well-known/ai-plugin.json .
 * </p>
 */
public class DirReaderPlugin implements HttpHandler {

    public static final String USAGE = """
            Usage: java DirReaderPlugin [PORT] [-h|--help]
            Description: Plugin for ChatGPT that can access the files in the directory it is started in.
            Arguments: PORT the port to listen on, default 3000.
            Options: -h or --help print this help message.
            """;

    final int port = 3000;

    final String AIPLUGIN_JSON = """
            {
                "schema_version": "v1",
                "name_for_human": "Directory Reader 2",
                "name_for_model": "dirreader",
                "description_for_human": "Read a directory and its files.",
                "description_for_model": "Help the user with inspecting and processing a directories files. You can list and read files and send reasons. Before each operation with the dirreader plugin please always send a reason why you're performing the operation.",
                "auth": {
                    "type": "none"
                },
                "api": {
                    "type": "openapi",
                    "url": "http://localhost:THEPORT/dirreaderplugin.yaml"
                },
                "logo_url": "https://d1q6f0aelx0por.cloudfront.net/product-logos/library-hello-world-logo.png",
                "contact_email": "yu4cheem@techno.ms",
                "legal_info_url": "http://www.example.com/legal"
            }
            """.stripIndent();

    final String OPENAPI_DESCR_START = """
            openapi: 3.0.1
            info:
              title: ReadDir ChatGPT Plugin
              description: A plugin that allows the user to inspect a directory and read the contents of files using ChatGPT
              version: 1.0.0
            servers:
              - url: http://localhost:THEPORT
            paths:
            """.stripIndent();

    final StringBuilder pathDescriptions = new StringBuilder();
    final Map<String, AbstractPluginOperation> handlers = new HashMap<>();

    final Map<String, Supplier<String>> STATICFILES = Map.of("/.well-known/ai-plugin.json", () -> AIPLUGIN_JSON.replaceAll("THEPORT", String.valueOf(port)), "/dirreaderplugin.yaml", () -> OPENAPI_DESCR_START + pathDescriptions.toString().replaceAll("THEPORT", String.valueOf(port)));

    final Path currentDir = Path.of(".").normalize().toAbsolutePath();

    public static void main(String[] args) throws IOException {
        if (Arrays.stream(args).anyMatch(s -> s.equals("-h") || s.equals("--help"))) {
            System.out.println(USAGE);
            System.exit(0);
        }
        int port = args.length > 0 ? Integer.parseInt(args[0]) : 3000;
        HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
        server.createContext("/", new DirReaderPlugin());
        server.setExecutor(null);
        server.start();
        System.out.println("Server started on http://localhost:" + port + "/");
    }

    @Override
    public void handle(HttpExchange exchange) throws IOException {
        System.out.println("Request: " + exchange.getRequestMethod() + " " + exchange.getRequestURI());
        try {
            String path = exchange.getRequestURI().getPath();
            exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "https://chat.openai.com");
            if (exchange.getRequestMethod().equalsIgnoreCase("OPTIONS")) {
                giveCORSResponse(exchange);
            } else if (STATICFILES.containsKey(path)) {
                handleStaticFile(exchange, path);
            } else if (handlers.containsKey(path)) {
                handlers.get(path).handle(exchange);
            } else if (path.equals("/")) {
                exchange.getResponseHeaders().add("Content-Type", "text/html");
                exchange.sendResponseHeaders(200, 0);
                exchange.getResponseBody().write("<html><body><h1>DirReaderPlugin</h1><p>See <a href=\"/.well-known/ai-plugin.json\">/.well-known/ai-plugin.json</a> for the plugin description.</p></body></html>".getBytes());
            } else {
                exchange.getResponseHeaders().add("Content-Type", "text/plain");
                exchange.sendResponseHeaders(404, 0);
                exchange.getResponseBody().write("Unknown request".getBytes());
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
            exchange.sendResponseHeaders(500, 0);
            exchange.getResponseBody().write(e.toString().getBytes(UTF_8));
        } finally {
            exchange.close();
        }
    }

    /**
     * Remove any CORS restrictions so that ChatGPT interface can use it.
     * TODO: restrict to ChatGPT domain
     */
    private void giveCORSResponse(HttpExchange exchange) throws IOException {
        // already there: exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
        exchange.getResponseHeaders().add("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
        if (exchange.getRequestHeaders().containsKey("Access-control-request-headers")) {
            exchange.getResponseHeaders().add("Access-Control-Allow-Headers", exchange.getRequestHeaders().getFirst("access-control-request-headers"));
        }
        exchange.getResponseHeaders().add("Access-Control-Max-Age", "3600");
        exchange.getResponseHeaders().add("Allow", "*");
        exchange.sendResponseHeaders(200, 0);
    }

    private void handleStaticFile(HttpExchange exchange, String path) throws IOException {
        String file = STATICFILES.get(path).get();
        if (path.endsWith(".yaml") || path.endsWith(".yml")) {
            exchange.getResponseHeaders().add("Content-Type", "text/yaml; charset=utf-8");
        } else if (path.endsWith(".json")) {
            exchange.getResponseHeaders().add("Content-Type", "application/json; charset=utf-8");
        } else {
            exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
        }
        exchange.sendResponseHeaders(200, 0);
        exchange.getResponseBody().write(file.getBytes(UTF_8));
        exchange.close();
    }

    private abstract class AbstractPluginOperation {
        public abstract void handle(HttpExchange exchange) throws IOException;

        Map<String, String> getQueryParams(HttpExchange exchange) {
            String query = exchange.getRequestURI().getQuery();
            if (query == null) {
                return Collections.emptyMap();
            }
            return Arrays.stream(query.split("&")).map(s -> s.split("=")).collect(Collectors.toMap(a -> a[0], a -> URLDecoder.decode(a[1], UTF_8)));
        }

        Path getPath(HttpExchange exchange) {
            String path = getQueryParams(exchange).get("path");
            Path resolved = currentDir.resolve(path).normalize().toAbsolutePath();
            if (!resolved.startsWith(currentDir)) {
                throw new IllegalArgumentException("Path " + path + " is not in current directory " + currentDir);
            }
            return resolved;
        }

        String jsonRep(String string) {
            string = string == null ? "" : string;
            string = string.replace("\b", "\\b")
                    .replace("\f", "\\f")
                    .replace("\n", "\\n")
                    .replace("\r", "\\r")
                    .replace("\t", "\\t");
            return "\"" + string.replace("\\", "\\\\").replace("\"", "\\\"") + "\"";
        }
    }

    // curl -is http://localhost:3000/listFiles?path=.
    private final AbstractPluginOperation LIST_FILES = new AbstractPluginOperation() {
        {
            handlers.put("/listFiles", this);
            pathDescriptions.append("""
                      /listFiles:
                        get:
                          operationId: listFiles
                          summary: Recursively lists files in a directory
                          parameters:
                            - name: path
                              in: query
                              description: relative path to directory
                              required: true
                              schema:
                                type: string
                          responses:
                            '200':
                              description: List of relative paths of the files
                              content:
                                application/json:
                                  schema:
                                    type: array
                                    items:
                                      type: string
                            '404':
                              description: Directory not found
                    """.stripIndent());
        }

        public void handle(HttpExchange exchange) throws IOException {
            Path path = getPath(exchange);
            if (Files.isDirectory(path)) {
                exchange.getResponseHeaders().add("Content-Type", "application/json; charset=utf-8");
                exchange.sendResponseHeaders(200, 0);
                List<String> files = Files.walk(path).filter(Files::isRegularFile).map(p -> currentDir.relativize(p).toString()).collect(Collectors.toList());
                String response = "[\n" + files.stream().map(this::jsonRep).collect(Collectors.joining(",\n")) + "\n]";
                exchange.getResponseBody().write(response.getBytes(UTF_8));
            } else {
                exchange.sendResponseHeaders(404, 0);
                exchange.getResponseBody().write("Directory not found".getBytes());
                return;
            }
        }
    };

    // curl -is http://localhost:3000/readFile?path=DirReaderPlugin
    private final AbstractPluginOperation READ_FILE = new AbstractPluginOperation() {
        {
            handlers.put("/readFile", this);
            pathDescriptions.append("""
                      /readFile:
                        get:
                          operationId: readFile
                          summary: Read a file
                          parameters:
                            - name: path
                              in: query
                              description: relative path to file
                              required: true
                              schema:
                                type: string
                          responses:
                            '200':
                              description: Content of the file
                              content:
                                text/plain:
                                  schema:
                                    type: string
                            '404':
                              description: File not found
                    """.stripIndent());
        }

        public void handle(HttpExchange exchange) throws IOException {
            Path path = getPath(exchange);
            if (Files.exists(path)) {
                exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
                byte[] bytes = Files.readAllBytes(path);
                exchange.sendResponseHeaders(200, bytes.length);
                exchange.getResponseBody().write(bytes);
            } else {
                exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
                exchange.sendResponseHeaders(404, 0);
                exchange.getResponseBody().write("File not found".getBytes());
            }
        }
    };

    /**
     * An operation /reason that might or might not be good to introduce a REACT like pattern - it just gets a text on stdin and writes that to stdout.
     */
    // curl -is http://localhost:3000/reason -d "Hello World"
    private final AbstractPluginOperation GIVE_REASON = new AbstractPluginOperation() {
        {
            handlers.put("/reason", this);
            pathDescriptions.append("""
                      /reason:
                        post:
                          operationId: reason
                          summary: Provide a reason for the next operation on the dirreader plugin
                          requestBody:
                            required: true
                            content:
                              text/plain:
                                schema:
                                  type: string
                          responses:
                            '204':
                              description: Reason accepted
                    """.stripIndent());
        }

        public void handle(HttpExchange exchange) throws IOException {
            exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
            exchange.sendResponseHeaders(204, -1);
            try (InputStream is = exchange.getRequestBody()) {
                System.out.print("Reason: ");
                is.transferTo(System.out);
                System.out.println();
            }
        }
    };
}
