#!/usr/bin/java --source 16

import static java.nio.charset.StandardCharsets.UTF_8;
import static java.nio.file.StandardOpenOption.CREATE;
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;
import static java.nio.file.StandardOpenOption.WRITE;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.UncheckedIOException;
import java.net.InetSocketAddress;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

/**
 * Plugin for ChatGPT that can access the files in the directory it is started in.
 * Implemented as a single Java application runnable from the shell, without using any dependencies outside the JDK.
 * To use this, you need to have registered as a plugin developer, and add this with "Develop your own plugin" in the ChatGPT web interface.
 * Start it in the directory you want to access, then use the plugin in ChatGPT.
 * <p>
 * Check OpenAPI description with curl -is http://localhost:3001/filemanagerplugin.yaml , and the plugin description with
 * curl -is http://localhost:3001/.well-known/ai-plugin.json .
 * </p>
 */
public class FileManagerPlugin implements HttpHandler {

    public static final String USAGE = """
            Usage: java FileManagerPlugin [PORT] [-h|--help]
            Description: Plugin for ChatGPT that can access the files in the directory it is started in.
            Arguments: PORT the port to listen on, default 3001.
            Options: -h or --help print this help message.
            """;

    private static final Pattern IGNORE = Pattern.compile(".*/[.].*|.*/target/.*");

    int port = 3001;

    final String AIPLUGIN_JSON = """
            {
                "schema_version": "v1",
                "name_for_human": "File Manager",
                "name_for_model": "filemanager",
                "description_for_human": "Read and write a directory and its files.",
                "description_for_model": "Help the user with inspecting and processing a directories files. You can list and read and write files. Do only write files at the explicit request of the user, and before changing the file print what changes you are going to make and ask for confirmation.",
                "auth": {
                    "type": "none"
                },
                "api": {
                    "type": "openapi",
                    "url": "http://localhost:THEPORT/filemanager.yaml"
                },
                "logo_url": "https://d1q6f0aelx0por.cloudfront.net/product-logos/library-hello-world-logo.png",
                "contact_email": "yu4cheem@techno.ms",
                "legal_info_url": "http://www.example.com/legal"
            }
            """.stripIndent();

    final String OPENAPI_DESCR_START = """
            openapi: 3.0.1
            info:
              title: FileManager ChatGPT Plugin
              description: A plugin that allows the user to inspect a directory and read the contents of files using ChatGPT
              version: 1.0.0
            servers:
              - url: http://localhost:THEPORT
            paths:
            """.stripIndent();

    final StringBuilder pathDescriptions = new StringBuilder();
    final Map<String, AbstractPluginOperation> handlers = new HashMap<>();

    final Map<String, Supplier<String>> STATICFILES = Map.of("/.well-known/ai-plugin.json",
            () -> AIPLUGIN_JSON.replaceAll("THEPORT", String.valueOf(port)), "/filemanager.yaml",
            () -> OPENAPI_DESCR_START.replaceAll("THEPORT", String.valueOf(port)) + pathDescriptions.toString());

    final Path currentDir = Path.of(".").normalize().toAbsolutePath();

    public static void main(String[] args) throws IOException {
        if (Arrays.stream(args).anyMatch(s -> s.equals("-h") || s.equals("--help"))) {
            System.out.println(USAGE);
            System.exit(0);
        }
        FileManagerPlugin handler = new FileManagerPlugin();
        handler.port = args.length > 0 ? Integer.parseInt(args[0]) : 3001;
        HttpServer server = HttpServer.create(new InetSocketAddress(handler.port), 0);
        server.createContext("/", handler);
        server.setExecutor(null);
        server.start();
        System.out.println("Server started on http://localhost:" + handler.port + "/ in " + handler.currentDir);
    }

    FileManagerPlugin() {
        register(new ListFilesOperation());
        register(new ReadFileOperation());
        register(new WriteFileOperation());
        register(new GiveReasonOperation());
        register(new ExecuteActionOperation());
    }

    void register(AbstractPluginOperation operation) {
        handlers.put(operation.getUrl(), operation);
        pathDescriptions.append(operation.openApiDescription());
    }

    @Override
    public void handle(HttpExchange exchange) throws IOException {
        if (!"OPTIONS".equals(exchange.getRequestMethod())) {
            System.out.println("Request: " + exchange.getRequestMethod() + " " + exchange.getRequestURI());
        }
        try {
            String path = exchange.getRequestURI().getPath();
            exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*"); // TODO https://chat.openai.com
            if (exchange.getRequestMethod().equalsIgnoreCase("OPTIONS")) {
                giveCORSResponse(exchange);
            } else if (STATICFILES.containsKey(path)) {
                handleStaticFile(exchange, path);
            } else if (handlers.containsKey(path)) {
                handlers.get(path).handle(exchange);
            } else if (path.equals("/")) {
                exchange.getResponseHeaders().add("Content-Type", "text/html");
                exchange.sendResponseHeaders(200, 0);
                exchange.getResponseBody().write("<html><body><h1>FileManagerPlugin</h1><p>See <a href=\"/.well-known/ai-plugin.json\">/.well-known/ai-plugin.json</a> for the plugin description.</p></body></html>\n".getBytes());
            } else {
                exchange.getResponseHeaders().add("Content-Type", "text/plain");
                exchange.sendResponseHeaders(404, 0);
                exchange.getResponseBody().write("Unknown request".getBytes());
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
            exchange.sendResponseHeaders(500, 0);
            exchange.getResponseBody().write(e.toString().getBytes(UTF_8));
        } finally {
            exchange.close();
        }
    }

    /**
     * Remove any CORS restrictions so that ChatGPT interface can use it.
     * TODO: restrict to ChatGPT domain
     */
    private void giveCORSResponse(HttpExchange exchange) throws IOException {
        // already there: exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
        exchange.getResponseHeaders().add("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
        if (exchange.getRequestHeaders().containsKey("Access-control-request-headers")) {
            exchange.getResponseHeaders().add("Access-Control-Allow-Headers", exchange.getRequestHeaders().getFirst("access-control-request-headers"));
        }
        exchange.getResponseHeaders().add("Access-Control-Max-Age", "3600");
        exchange.getResponseHeaders().add("Allow", "*");
        exchange.sendResponseHeaders(200, 0);
    }

    private void handleStaticFile(HttpExchange exchange, String path) throws IOException {
        String file = STATICFILES.get(path).get();
        if (path.endsWith(".yaml") || path.endsWith(".yml")) {
            exchange.getResponseHeaders().add("Content-Type", "text/yaml; charset=utf-8");
        } else if (path.endsWith(".json")) {
            exchange.getResponseHeaders().add("Content-Type", "application/json; charset=utf-8");
        } else {
            exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
        }
        exchange.sendResponseHeaders(200, 0);
        exchange.getResponseBody().write(file.getBytes(UTF_8));
        exchange.close();
    }

    static abstract class AbstractPluginOperation {
        /**
         * Content JSON is  e.g. {"content":"Sunlight warms the day,\nClouds dance in the azure sky,\nWeather's gentle play."}
         * We extract the content string inside quotes.
         */
        static final Pattern CONTENT_PATTERN = Pattern.compile("\\s*\\{\\s*\"content\"\\s*:\\s*\"(.*)\"\\s*\\}\\s*");
        protected final Path currentDir = Path.of(".").normalize().toAbsolutePath();

        // unquote quoted characters \n, \t, \", \\, \b, \f, \r
        String unquoteJsoncontent(String content) {
            StringBuilder buf = new StringBuilder();
            for (int i = 0; i < content.length(); i++) {
                char c = content.charAt(i);
                if (c == '\\') {
                    i++;
                    c = content.charAt(i);
                    switch (c) {
                        case 'n':
                            buf.append('\n');
                            break;
                        case 't':
                            buf.append('\t');
                            break;
                        case '"':
                            buf.append('"');
                            break;
                        case '\\':
                            buf.append('\\');
                            break;
                        case 'b':
                            buf.append('\b');
                            break;
                        case 'f':
                            buf.append('\f');
                            break;
                        case 'r':
                            buf.append('\r');
                            break;
                        default:
                            throw new IllegalArgumentException("Unknown escape sequence \\" + c);
                    }
                } else {
                    buf.append(c);
                }
            }
            return buf.toString();
        }

        public abstract void handle(HttpExchange exchange) throws IOException;

        public abstract String getUrl();

        /**
         * The OpenAPI description for this operation.
         */
        public abstract String openApiDescription();

        protected Map<String, String> getQueryParams(HttpExchange exchange) {
            String query = exchange.getRequestURI().getQuery();
            if (query == null) {
                return Collections.emptyMap();
            }
            return Arrays.stream(query.split("&")).map(s -> s.split("=")).collect(Collectors.toMap(a -> a[0], a -> URLDecoder.decode(a[1], UTF_8)));
        }

        protected Path getPath(HttpExchange exchange) {
            String path = getQueryParams(exchange).get("path");
            Path resolved = currentDir.resolve(path).normalize().toAbsolutePath();
            if (!resolved.startsWith(currentDir)) {
                throw new IllegalArgumentException("Path " + path + " is not in current directory " + currentDir);
            }
            return resolved;
        }

        protected String jsonRep(String string) {
            string = string == null ? "" : string;
            string = string.replace("\b", "\\b")
                    .replace("\f", "\\f")
                    .replace("\n", "\\n")
                    .replace("\r", "\\r")
                    .replace("\t", "\\t");
            return "\"" + string.replace("\\", "\\\\").replace("\"", "\\\"") + "\"";
        }
    }

    // curl -is http://localhost:3001/listFiles?path=.
    static class ListFilesOperation extends AbstractPluginOperation {

        @Override
        public String getUrl() {
            return "/listFiles";
        }

        @Override
        public String openApiDescription() {
            return """
                      /listFiles:
                        get:
                          operationId: listFiles
                          summary: Recursively lists files in a directory.
                          parameters:
                            - name: path
                              in: query
                              description: relative path to directory
                              required: true
                              schema:
                                type: string
                            - name: filenameRegex
                              in: query
                              description: regex to filter file names
                              required: false
                              schema:
                                type: string
                            - name: grepRegex
                              in: query
                              description: q
                              required: false
                              schema:
                                type: string
                          responses:
                            '200':
                              description: List of relative paths of the files
                              content:
                                application/json:
                                  schema:
                                    type: array
                                    items:
                                      type: string
                            '404':
                              description: Directory not found
                    """.stripIndent();
        }

        public void handle(HttpExchange exchange) throws IOException {
            Map<String, String> queryParams = getQueryParams(exchange);
            Path path = getPath(exchange);
            String filenameRegex = queryParams.get("filenameRegex");
            String grepRegex = queryParams.get("grepRegex");
            Pattern filenamePattern = filenameRegex != null ? Pattern.compile(filenameRegex) : null;
            Pattern grepPattern = grepRegex != null ? Pattern.compile(grepRegex) : null;

            if (Files.isDirectory(path)) {
                exchange.getResponseHeaders().add("Content-Type", "application/json; charset=utf-8");
                exchange.sendResponseHeaders(200, 0);
                List<String> files = Files.walk(path)
                        .filter(Files::isRegularFile)
                        .filter(p -> !IGNORE.matcher(p.toString()).matches())
                        .filter(p -> filenamePattern == null || filenamePattern.matcher(p.getFileName().toString()).matches())
                        .filter(p -> {
                            if (grepPattern == null) {
                                return true;
                            } else {
                                try (Stream<String> lines = Files.lines(p)) {
                                    return lines.anyMatch(line -> grepPattern.matcher(line).find());
                                } catch (IOException e) {
                                    throw new UncheckedIOException(e);
                                }
                            }
                        })
                        .map(p -> currentDir.relativize(p).toString())
                        .collect(Collectors.toList());
                String response = "[\n" + files.stream().map(this::jsonRep).collect(Collectors.joining(",\n")) + "\n]\n";
                exchange.getResponseBody().write(response.getBytes(UTF_8));
            } else {
                exchange.sendResponseHeaders(404, 0);
                exchange.getResponseBody().write("Directory not found".getBytes());
                return;
            }
        }
    }

    // curl -is http://localhost:3001/readFile?path=somefile.txt
    static class ReadFileOperation extends AbstractPluginOperation {

        @Override
        public String getUrl() {
            return "/readFile";
        }

        @Override
        public String openApiDescription() {
            return """
                      /readFile:
                        get:
                          operationId: readFile
                          summary: Read a files content.
                          parameters:
                            - name: path
                              in: query
                              description: relative path to file
                              required: true
                              schema:
                                type: string
                          responses:
                            '200':
                              description: Content of the file
                              content:
                                text/plain:
                                  schema:
                                    type: string
                            '404':
                              description: File not found
                    """.stripIndent();
        }

        public void handle(HttpExchange exchange) throws IOException {
            Path path = getPath(exchange);
            if (Files.exists(path)) {
                exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
                byte[] bytes = Files.readAllBytes(path);
                exchange.sendResponseHeaders(200, bytes.length);
                exchange.getResponseBody().write(bytes);
            } else {
                exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
                exchange.sendResponseHeaders(404, 0);
                exchange.getResponseBody().write("File not found".getBytes());
            }
        }
    }

    /**
     * An operation /reason that might or might not be good to introduce a REACT like pattern - it just gets a text on stdin and writes that to stdout.
     */
    // curl -is http://localhost:3001/reason -d "{\"reason\": \"testreason\"}"
    static class GiveReasonOperation extends AbstractPluginOperation {

        @Override
        public String getUrl() {
            return "/reason";
        }

        @Override
        public String openApiDescription() {
            return """
                      /reason:
                        post:
                          operationId: reason
                          summary: Provide a reason for the next operation on the filemanager plugin.
                          requestBody:
                            required: true
                            content:
                              application/json:
                                schema:
                                  type: object
                                  properties:
                                    content:
                                      type: string
                          responses:
                            '204':
                              description: Reason accepted
                    """.stripIndent();
        }

        public void handle(HttpExchange exchange) throws IOException {
            exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
            exchange.sendResponseHeaders(204, -1);
            try (InputStream is = exchange.getRequestBody()) {
                System.out.print("Reason: ");
                is.transferTo(System.out);
                System.out.println();
            }
        }
    }

    /**
     * an operation that writes the message into the file at path.
     */
    // curl -is http://localhost:3001/writeFile?path=testfile -d '{"content":"testcontent line one\nline two\n"}'
    static class WriteFileOperation extends AbstractPluginOperation {

        @Override
        public String getUrl() {
            return "/writeFile";
        }

        @Override
        public String openApiDescription() {
            return """
                      /writeFile:
                        post:
                          operationId: writeFile
                          summary: "Write a file."
                          parameters:
                            - name: path
                              in: query
                              description: relative path to directory for the created file
                              required: true
                              schema:
                                type: string
                          requestBody:
                            required: true
                            content:
                              application/json:
                                schema:
                                  type: object
                                  properties:
                                    content:
                                      type: string
                          responses:
                            '204':
                              description: File written
                            '422':
                              description: The request body was not a valid JSON object with a content property
                    """.stripIndent();
        }

        public void handle(HttpExchange exchange) throws IOException {
            try (InputStream is = exchange.getRequestBody()) {
                String json = new String(is.readAllBytes(), UTF_8);
                Matcher matcher = CONTENT_PATTERN.matcher(json);
                if (!matcher.matches()) { // send 422
                    System.out.println("Broken JSON: " + json);
                    exchange.sendResponseHeaders(422, 0);
                    exchange.getResponseBody().write("The request body was not a valid JSON object with a content property".getBytes());
                    return;
                }
                String content = unquoteJsoncontent(matcher.group(1));
                Path path = getPath(exchange);
                if (!Files.exists(path.getParent())) {
                    Files.createDirectories(path.getParent());
                }
                exchange.sendResponseHeaders(204, -1);
                Files.write(path, content.getBytes(UTF_8), CREATE, WRITE, TRUNCATE_EXISTING);
                System.out.println("Wrote file " + path);
            }
        }
    }

    static class ExecuteActionOperation extends AbstractPluginOperation {

        @Override
        public String getUrl() {
            return "/executeAction";
        }

        @Override
        public String openApiDescription() {
            return """
                      /executeAction:
                        post:
                          operationId: executeAction
                          summary: "Execute an action with given content as standard input. Only on explicit user request."
                          parameters:
                            - name: actionName
                              in: query
                              description: name of the action to be executed
                              required: true
                              schema:
                                type: string
                          requestBody:
                            required: true
                            content:
                              application/json:
                                schema:
                                  type: object
                                  properties:
                                    content:
                                      type: string
                          responses:
                            '200':
                              description: Action executed successfully, output returned
                              content:
                                text/plain:
                                  schema:
                                    type: string
                            '400':
                              description: Action not found
                            '500':
                              description: Action execution failed, output returned
                    """.stripIndent();
        }

        public void handle(HttpExchange exchange) throws IOException {
            Map<String, String> queryParams = getQueryParams(exchange);
            String actionName = queryParams.get("actionName");
            Path path = currentDir.resolve(".cgptfmgr/" + actionName + ".sh");

            if (!Files.exists(path)) {
                exchange.sendResponseHeaders(400, 0);
                exchange.getResponseBody().write(("Action " + actionName + " not found").getBytes());
                return;
            }

            try (InputStream is = exchange.getRequestBody()) {
                String json = new String(is.readAllBytes(), UTF_8);
                String content = "";
                if (json != null && !json.isBlank() && !json.trim().replaceAll("\s+", "").equals("{}")) {
                    Matcher matcher = CONTENT_PATTERN.matcher(json);
                    if (!matcher.matches()) {
                        exchange.sendResponseHeaders(422, 0);
                        exchange.getResponseBody().write(("The request body was not a valid JSON object with a content property: " + json).getBytes());
                        return;
                    }
                    content = unquoteJsoncontent(matcher.group(1));
                }
                ProcessBuilder pb = new ProcessBuilder("/bin/sh", path.toString());
                pb.redirectErrorStream(true);
                Process process = pb.start();
                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));
                writer.write(content);
                writer.close();

                int exitCode = process.waitFor();
                InputStream inputStream = process.getInputStream();
                String output = new String(inputStream.readAllBytes(), UTF_8);

                if (exitCode == 0) {
                    exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=utf-8");
                    exchange.sendResponseHeaders(200, output.length());
                    exchange.getResponseBody().write(output.getBytes());
                } else {
                    String response = "Execution failed with exit code " + exitCode + ": " + output;
                    exchange.sendResponseHeaders(500, response.length());
                    exchange.getResponseBody().write(response.getBytes());
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }

}
