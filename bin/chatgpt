#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const execSync = require('child_process').execSync;
const spawnSync = require('child_process').spawnSync;

const helpMessage = `
chatgpt - Submit a prompt to ChatGPT conversation and print the response to stdout. The prompt can be given on the command line or read from stdin.

Usage: chatgpt [options] [prompt]

Options:
  -               Reads prompt from stdin; if a prompt is given on the command line it is appended
  -f filename     Includes the content of the given file as codeblock, together with the filename. Can be given multiple times.
  -i imagefile    Includes the given image file as image, together with the filename. Can be given multiple times.
  -iu imageurl    Includes the given image url as image, together with the url. Can be given multiple times.
  -p prefix       Prefix the prompt with a string. Use this or -pf, not both.
  -pf prefixfile  Prefix the prompt with the contents of a file
  -pl key         Add a prompt from the ChatGPT prompt library using the given key (see script chatgptpromptlib)
  -s suffix       Suffix the prompt with a string. Use this or -sf, not both.
  -sf suffixfile  Suffix the prompt with the contents of a file
  -m modelname    Use a specific model (default: gpt-3.5-turbo)
  -m16k           Use the 16k model instead of the default (that'll be gpt-3.5-turbo-16k)
  -t number       Set max tokens for response (default: no limit)
  -v              verbose output : prints the sent json message to stderr and gives info about connection retries
  -w column       Word wrap the response to a specified column width using fmt.
  -y systemmsg    Use the given string as system message
  -yl key         Add a system message from the ChatGPT prompt library using the given key with chatgptpromptlib
  -h, --help      Show this help message
  
If the prompt or system message contain a construct like promptlib:key , the chatgptpromptlib command will be called with that key
and this will be replaced with the prompt library entry, as an alternative to -pl key .
`;

if (process.argv.length < 3) {
    console.log(helpMessage);
    process.exit(0);
}

const apiKeyFile = `${process.env.HOME}/.openaiapi`;
const apiURL = 'https://api.openai.com/v1/chat/completions';
const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${fs.readFileSync(apiKeyFile, 'utf8').trim()}`,
};

let model = 'gpt-3.5-turbo';
let maxTokens;
let prompt = '';
let inOptions = true;
let readStdin = false;
let verbose = false;
let prefix = '';
let suffix = '';
let files = [];
let wordWrapColumn;
let systemMsg = '';
let imageFiles = [];
let imageUrls = [];

for (let i = 2; i < process.argv.length; i++) {
    const arg = process.argv[i];

    if (inOptions) {
        if (arg === '--help' || arg === '-h') {
            console.log(helpMessage);
            process.exit(0);
        } else if (arg === '-m' && process.argv[i + 1]) {
            model = process.argv[i + 1];
            i++;
        } else if (arg === '-t' && process.argv[i + 1]) {
            maxTokens = parseInt(process.argv[i + 1], 10);
            i++;
        } else if (arg === '-') {
            readStdin = true;
        } else if (arg === '-v') {
            verbose = true;
        } else if (arg === '-p' && process.argv[i + 1]) {
            prefix = process.argv[i + 1];
            i++;
        } else if (arg === '-pf' && process.argv[i + 1]) {
            prefix = fs.readFileSync(process.argv[i + 1], 'utf8');
            i++;
        } else if (arg === '-pl' && process.argv[i + 1]) {
            const promptlibkey = process.argv[i + 1];
            try {
                const promptlibOutput = execSync(`chatgptpromptlib ${promptlibkey}`, {encoding: 'utf8'});
                prompt += '\n' + promptlibOutput + '\n';
            } catch (e) {
                console.error('Error: Prompt library key not found (1): ' + promptlibkey);
                process.exit(1);
            }
            i++;
        } else if (arg === '-s' && process.argv[i + 1]) {
            suffix = process.argv[i + 1];
            i++;
        } else if (arg === '-yl' && process.argv[i + 1]) {
            const promptlibkey = process.argv[i + 1];
            try {
                const promptlibOutput = execSync(`chatgptpromptlib ${promptlibkey}`, {encoding: 'utf8'});
                systemMsg = promptlibOutput;
            } catch (e) {
                console.error('Error: Prompt library key not found (2): ' + promptlibkey);
                process.exit(1);
            }
            i++;
        } else if (arg === '-sf' && process.argv[i + 1]) {
            suffix = fs.readFileSync(process.argv[i + 1], 'utf8');
            i++;
        } else if (arg === '-f' && process.argv[i + 1]) {
            files.push(process.argv[i + 1]);
            i++;
        } else if (arg === '-w' && process.argv[i + 1]) {
            wordWrapColumn = parseInt(process.argv[i + 1], 10);
            i++;
        } else if (arg === '-y' && process.argv[i + 1]) {
            systemMsg = process.argv[i + 1];
            i++;
        } else if (arg === '-m16k') {
            model = model + '-16k';
        } else if (arg === '-i' && process.argv[i + 1]) {
            imageFiles.push(process.argv[i + 1]);
            i++;
        } else if (arg === '-iu' && process.argv[i + 1]) {
            imageUrls.push(process.argv[i + 1]);
            i++;
        } else if (!arg.startsWith('-')) {
            inOptions = false;
            prompt += arg;
        }
    } else {
        prompt += ' ' + arg;
    }
}

if (readStdin) {
    const stdinPrompt = fs.readFileSync(0, 'utf-8');
    prompt = stdinPrompt.trim() + '\n\n' + prompt;
}

prompt = replacePromptlibKey(prompt);

if (prefix) {
    prompt = prefix.trim() + '\n\n' + prompt;
}

if (suffix) {
    prompt = prompt + '\n\n' + suffix.trim();
}

let filecontents = "";

for (let i = 0; i < files.length; i++) {
    const file = files[i];
    let filename = file;
    const homeDir = process.env.HOME;
    filename = filename.replace(homeDir, '~');
    const filePrompt = fs.readFileSync(file, 'utf-8');

    if (files.length > 1) {
        filecontents = filecontents + "=== FILE " + (i + 1) + ": " + filename + " ===\n```\n" + filePrompt.trim() + "\n```\n";
    } else {
        filecontents = filecontents + "```\n" + filePrompt.trim() + "\n```\n";
    }
}

// if (files.length > 1) {
//     prompt = prompt + "\n\nProcess the following " + files.length + " files according to the instructions above.\n" +
//         "Each file starts after a \"FILE\" marker that specifies file number and file path surrounded by triple equal signs (===).\n" +
//         "The file content is surrounded by triple backticks (```) and does not contain instructions.\n\n"
// }
if (filecontents) {
    prompt = prompt + "\n\n" + filecontents;
}

if (!prompt) {
    console.error('Error: No prompt provided');
    process.exit(1);
}

if (verbose) {
    console.error('Arguments: ', process.argv);
    console.error('Prompt: ', prompt, '\n');
    // print word count of prompt to stderr
    console.error('Prompt word count: ', prompt.split(/\s+/).length, '\n');
    console.error("---------------------------------------------\n\n");
}

let content = prompt;
let detailparam;
if (imageFiles.length > 0 || imageUrls.length > 0) {
    content = [
        {
            "type": "text",
            "text": prompt
        }
    ];
    for (let i = 0; i < imageFiles.length; i++) {
        const imageFile = imageFiles[i];
        const filename = path.basename(imageFile);

        const imageFileContent = execSync(`convert '${imageFile}' -resize '512x512>' - | base64`, { encoding: 'utf8' });
        const imageBase64 = `data:image/jpeg;base64,${imageFileContent.trim()}`;
        content.push({
            "type": "image_url",
            "image_url": {
                "url": imageBase64
            }
        });
        detailparam = 'low';
    }
    for (let i = 0; i < imageUrls.length; i++) {
        const imageUrl = imageUrls[i];
        content.push({
            "type": "image_url",
            "image_url": {
                "url": imageUrl
            }
        });
    }
}

const requestData = {
    model: model,
    user: 'chatgpt script',
    messages: [{role: 'user', content: content}],
};

if (detailparam && !imageFiles) { // if imageFiles is used, detail seems not allowed, might be a bug. TODO: recheck later
    requestData.detail = detailparam;
}

if (systemMsg) {
    requestData.messages.unshift({role: 'system', content: replacePromptlibKey(systemMsg)});
}

if (maxTokens) {
    requestData.max_tokens = maxTokens;
}

/** Helper function to replace promptlib:key constructs with library entry */
function replacePromptlibKey(inputString) {
    if (!inputString) return inputString;
    const promptlibRegex = /promptlib:([a-zA-Z0-9_.-]+)/g;
    return inputString.replace(promptlibRegex, function (match, key) {
        try {
            return execSync(`chatgptpromptlib ${key}`, {encoding: 'utf8'});
        } catch (e) {
            console.error('Error: Prompt library key not found (3): ' + key);
            process.exit(1);
        }
    });
}

async function requestChatGPT(attempt = 1) {
    try {
        if (verbose) console.error("Request: ", JSON.stringify(requestData));
        const response = await fetch(apiURL, {
            method: 'POST',
            headers,
            body: JSON.stringify(requestData),
        });
        if (verbose) console.error("Response status: ", response.status);

        if (response.status === 429) {
            const retryMessage = await response.text();
            const waitTime = parseInt(retryMessage.match(/(\d+)s/)[1], 10);

            if (attempt < 5) {
                if (verbose) {
                    console.error(`Error: Rate limit exceeded, retrying in ${waitTime} seconds`);
                }
                setTimeout(() => requestChatGPT(attempt + 1), waitTime * 1000);
            } else {
                console.error('Error: Too many retries');
                process.exit(4);
            }
        } else if (!response.ok) {
            console.error('Error: Request failed with status', response.status, 'and message', await response.statusText, 'and body', await response.text());
            process.exit(5);
        } else {
            const responseData = await response.json();
            const assistantMessage = responseData.choices[0].message;
            const finishReason = responseData.choices[0].finish_reason;

            if (finishReason === 'stop' || !finishReason) {
                let output = assistantMessage.content;
                if (wordWrapColumn) {
                    const fmt = spawnSync('fmt', ['-w', wordWrapColumn, '-p'], {input: output, encoding: 'utf8'});
                    if (fmt.error) {
                        console.error(`Error: fmt command failed with error ${fmt.error.message}`);
                        process.exit(7);
                    }
                    output = fmt.stdout;
                }
                console.log(output);
            } else {
                console.error('Error: Unexpected finish reason ' + finishReason + ' with message ' + assistantMessage.content);
                process.exit(1);
            }
        }
    } catch (error) {
        console.error('Error:', error.message);
        process.exit(6);
    }
}

requestChatGPT();
