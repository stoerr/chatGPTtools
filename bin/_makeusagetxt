#!/bin/bash

if [ "$#" -gt 0 ] && [ "$1" = "-h" ] && [ "$1" = "--help" ]; then
  echo "Usage: $(basename $0) [options]"
  echo ""
  echo "Options:"
  echo "  -h, --help          Show this help message and exit"
  echo ""
  echo "Description:"
  echo "  This script checks for a '_usages.txt' file in its directory and updates"
  echo "  it with the --help output of all executable files in the current directory"
  echo "  that do not start with an underscore and are newer than '_usages.txt'."
  exit 0
fi

# set -vx

script_dir="$(dirname "$(realpath "$0")")"
usage_file="${script_dir}/_usages.txt"

if [ -n "$(find ${script_dir} -maxdepth 1 -type f -perm -u=x ! -name "_*")" ]; then
  rm "$usage_file" && touch "$usage_file" # Remove old _usages.txt and create a new one
  for exe in $(find ${script_dir} -maxdepth 1 -type f -perm -u=x ! -name "_*" | sort); do
    exe_name=$(basename "$exe")
    echo "# $exe_name" >> "$usage_file"
    ${script_dir}/"$exe_name" --help >> "$usage_file" 2>&1
    echo >> "$usage_file"
    echo >> "$usage_file"
  done
  echo "Updated _usages.txt with the latest --help output."
fi

# This script was generated using ChatGPT with the following prompt, and then manually edited slightly:
# Please generate a script for the command line for the following task, runnable on a MacBook Pro with Apple M1 Max, that is, arm64 architecture, and MacOS Ventura 13.3.1 . It can be either a bash script using any of the normally present MacOS command line tools or what is installable with homebrew, or a NodeJS script for version 19.5.0 . If NodeJS, it should not require installing any additional libraries. If called without arguments or with the argument
# --help, the script should describe it's usage and exit - including what options and arguments it expects, and (important!) a short description what it does.

# The name of the script is _makeusagetxt. There are no command line arguments or options except --help. It should check whether there is a file name  _usages.txt in the directory it is in, and if there are any executable files in the current directory that do have a name not starting with _ and are newer than _usages.txt. If _usages.txt is not there or not newer, it should execute all those executable files with the argument --help and collect the output into _usages.txt . Each output should be prefixed with
# (name of that executable file)
