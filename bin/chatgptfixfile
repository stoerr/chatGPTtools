#!/bin/bash

print_help() {
  echo "Usage: chatgptfixfile [options] [filepath] [prompt]"
  echo "A script to modify a file using the ChatGPT API and display the differences."
  echo ""
  echo "Options:"
  echo "  -f <additionalfile>  Add an additional file to be passed to ChatGPT with -f option (can be used multiple times)"
  echo "  -m <modelname>       Use a specific model (default: gpt-4o-mini)"
  echo "  --help               Display this help text and exit"
  echo ""
  echo "Arguments:"
  echo "  filepath             Path of the file to be modified"
  echo "  prompt               Prompt to send to ChatGPT"
  echo ""
  echo "Description:"
  echo "The script calls ChatGPT with the given file and prompt, extracts a code block from the output, and creates a new file with the changes. It then displays the differences between the original and the new file using 'idea diff'."
}

# Check if help argument is provided
if [[ "$1" == "--help" ]]; then
  print_help
  exit 0
fi

# Check for the correct number of arguments
if [[ $# -lt 2 ]]; then
  print_help
  exit 1
fi

modelname="gpt-4o-mini"

# Parse options
additional_files=()
while getopts "f:m:" opt; do
  case $opt in
    f)
      additional_files+=("$OPTARG")
      ;;
    m)
      modelname=$OPTARG
      ;;
    *)
      print_help
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

# Parse non-option arguments
filepath=$1
# prompt is the rest of the arguments
prompt="Your task is: ${@:2} End of task."

prompt="$prompt
$(chatgptpromptlib -d "mainfile=$filepath" fixSingleFile)"

# Call chatgpt with the file and prompt
chatgpt_args=("-f" "$filepath" -y 'promptlib:programmersys' -m "$modelname")
for file in "${additional_files[@]}"; do
  chatgpt_args+=("-f" "$file")
done

gptoutput=$(chatgpt "${chatgpt_args[@]}" "$prompt")
exit_status=$?

if [[ $exit_status -ne 0 ]]; then
  echo "Error: ChatGPT exited with status code $exit_status"
  exit 1
fi

# Extract code block from ChatGPT output
newcontent=$(echo "$gptoutput" | chatgptextractcodeblock)
exit_status=$?

if [[ $exit_status -ne 0 ]]; then
  echo "Error: chatgptextractcodeblock exited with status code $exit_status"
  exit 1
fi

# Rename original file and write new content
mv "$filepath" "$filepath.gptfix.orig"
cp "$filepath.gptfix.orig" "$filepath" # ensure we have the same permissions
echo "$newcontent" > "$filepath"

echo "Moved $filepath to $filepath.gptfix.orig and wrote new content to $filepath"
echo "The response was:"
echo "$gptoutput"

# Display differences using 'idea diff'
intellij diff "$filepath.gptfix.orig" "$filepath" &

# Specification for generation with ChatGPT was originally:
#The script chatfgptfixfile is called like this:
#chatgptfixfile [filepath] [prompt]
#and can have the option -f [additionalfile] several times. It calls chatgpt with -f filepath and the given prompt.
#If -f is given, chatgpt additionally gets the option -f with that additionalfile .
#The result is read into a variable gptoutput. If chatgpt exits with a status code not 0, it prints an error message and aborts. The content of the variable gptoutput is piped through program chatgptextractcodeblock into a variable newcontent. If that doesn't exit with 0, again an error message is printed.
#Now the file filepath is renamed to extension .gptfix.orig, a new file with newcontent is written to filepath and 'idea diff filepath.gptfix.orig filepath' is called to display the differences.
#Please include a short description into the help message.
